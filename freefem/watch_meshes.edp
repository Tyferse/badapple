load "ppm2rnm" 
load "isoline"


ifstream fileListIn("flist.txt");
string fileName;
int n;
fileListIn >> n;

real hsize= 5; // mesh sir in pixel ..
real[int,int] Curves(4,3);
int[int] be(1);
int nc; // nb of curve

// cout << Curves << endl;
for (int i = 0; i < n; i++) {
    fileListIn >> fileName;

    // 6425     1143
    if (i < 1) continue;
    // fileListIn >> fileName;
    // cout << fileName << endl;
    {
        real[int,int] ff1(fileName); // read image (figure 5.40)
        // and set to an rect. array
        int nx = ff1.n, ny=ff1.m; // grey value between 0 to 1 (dark)
        // build a Cartesian mesh such that the origin is qt the right place
        // cout << nx << " " << ny << endl;
        mesh Th = square(nx-1,ny-1,[(nx-1)*(x), (ny-1)*(1-y)]);
        // warning the numbering is of the vertices (x,y) is
        // given by i = x/nx + nx âˆ— y/ny
        fespace Vh(Th,P1);
        Vh f1; 
        f1[] = ff1; // transforme array in finite element function.
        nc = isoline(Th, f1, iso=0.25, close=0, Curves, beginend=be, smoothing=.25, ratio=.5);
    }

    // the longest isoline : the lac ..
    // cout << "be= " << be(0.999009) << endl;
    int ic0 = be(0), ic1 = be(1) - 1;
    // cout << ic0 << " " << ic1 << endl;

    // plot([Curves(0,ic0:ic1), Curves(1,ic0:ic1)], wait=1);
    int NC = Curves(2, ic1);
    // cout << NC << endl;
    // for (real p = 0.; p <= 1.; p += 0.001)
    //     cout << Curve(Curves, ic0, ic1, p) << endl;
    // cout << Curve(Curves, ic0, ic1, 1) << endl;

    real xl = Curves(0, ic0:ic1).max - 5;
    real yl = Curves(1, ic0:ic1).min + 5;
    // cout << xl << " " << yl << endl;
    border G(t=0,1) {P = Curve(Curves, ic0, ic1, t); label = 1 + (x > xl)*2 + (y < yl);}
    plot(G(-NC), wait=1);
}
